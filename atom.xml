<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Eric Rochester</title>
    <link href="http://www.ericrochester.com//atom.xml" rel="self" />
    <link href="http://www.ericrochester.com/" />
    <id>http://www.ericrochester.com//atom.xml</id>
    <author>
        <name>Eric Rochester</name>
        <email>erochest@gmail.com</email>
    </author>
    <updated>2016-11-15T15:45:29Z</updated>
    <entry>
    <title>Finding Beauty</title>
    <link href="http://www.ericrochester.com//posts/notes/finding-beauty/index.html" />
    <id>http://www.ericrochester.com//posts/notes/finding-beauty/index.html</id>
    <published>2016-11-15T15:45:29Z</published>
    <updated>2016-11-15T15:45:29Z</updated>
    <summary type="html"><![CDATA[<p>For the past few months, I’ve cultivated an intentional practice to look for beauty.</p>
<!--more-->
<p>Partially I’m trying to be more aware of things around me and their beauty. It’s an amazing, fucked up world.</p>
<p>Wading through email is typically not beautiful. So I’ve subscribed to a couple of email lists that help that. Whenever I open one of these, I take a minute to be present to whatever’s inside.</p>
<ul>
<li><a href="http://writersalmanac.org/">Writer’s Almanac</a> sends me a poem each day. There’s a nice variety of anthology-poetry and newer poetry, although my impression is that it does tend toward less experimental works.</li>
<li><a href="http://www.storypeople.com/">StoryPeople</a> sends a drawing and short-short-short story each day. They’re a joyful little interruption from (and engagement in) life.</li>
</ul>
<p>I’m curious where others look for beauty. Feel free to send me suggestions on Twitter or Facebook, and I’ll post some that stand out to me here.</p>]]></summary>
</entry>
<entry>
    <title>Pace Yourself</title>
    <link href="http://www.ericrochester.com//posts/notes/pace-yourself/index.html" />
    <id>http://www.ericrochester.com//posts/notes/pace-yourself/index.html</id>
    <published>2016-11-14T02:16:56Z</published>
    <updated>2016-11-14T02:16:56Z</updated>
    <summary type="html"><![CDATA[<p>Four years is a long time. Eight years is longer.</p>
<!--more-->
<p>Both those time spans are easy to wrap our heads around, though. The truth is that most of us will be dead before the world sees the kind of society we want to live in.</p>
<p>This isn’t a sprint. It’s not even a marathon. It’s a multigenerational migration.</p>
<p>I’ll be posting links to more humor, trying my hand at more fiction. I’ll be trying to listen to those who’ve worked these fields before me.</p>
<p>Pace yourself.</p>
<hr />
<p>I was going to pull a quote or two from each of these links, but they’re both just so good. At some point this week I’m going to highlight quotes I like from the transcripts of these on <a href="https://hypothes.is/">Hypothesis</a>. Those will probably show up again on this blog in some form.</p>
<ul>
<li><a href="http://www.onbeing.org/program/parker-palmer-and-courtney-martin-the-inner-life-of-rebellion/7122">The Inner Life of Rebellion</a> — Parker Palmer and Courtney Martin</li>
<li><a href="http://www.onbeing.org/program/vincent-harding-is-america-possible/79">Is America Possible?</a> — Vincent Harding</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Read It!</title>
    <link href="http://www.ericrochester.com//posts/notes/read-it/index.html" />
    <id>http://www.ericrochester.com//posts/notes/read-it/index.html</id>
    <published>2016-11-12T12:33:59Z</published>
    <updated>2016-11-12T12:33:59Z</updated>
    <summary type="html"><![CDATA[<p>Read this whole thread:</p>
<!--more-->
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
I woke up out of my dead sleep an hour ago. I knew Trump won before I went to bed. I just thought I might have a full nights sleep first
</p>
— 5'7 Black Male (<span class="citation">@absurdistwords</span>) <a href="https://twitter.com/absurdistwords/status/796301496698671104">November 9, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></summary>
</entry>
<entry>
    <title>Energy Packets/Waves</title>
    <link href="http://www.ericrochester.com//posts/notes/energy-packets/index.html" />
    <id>http://www.ericrochester.com//posts/notes/energy-packets/index.html</id>
    <published>2016-11-09T14:07:24Z</published>
    <updated>2016-11-09T14:07:24Z</updated>
    <summary type="html"><![CDATA[<p>Some random thoughts, not about the news, but of course that’s the context.</p>
<!--more-->
<p><a href="http://www.romankrznaric.com/outrospection/2012/10/16/1729" title="Ready for a vulnerability hangover?"><em>Vulnerability hangover</em></a>. It’s a thing. But it’s also kind of the point of the post, no?</p>
<p>For my next longer post I’m thinking about the words and metaphors I used in my <a href="/posts/thoughts/divisions/" title="Divisions">last post</a>.</p>
<p>As I sat meditating this morning, the sun came out from behind a building. I know because I felt my cheek warm and saw the light through my eyelids. And it occurred to me that those packets/waves of energy had travelled 8 light-minutes from a huge ball of fire. Most of the packets/waves that leave that inferno spin off into darkness. Some got scattered by the atmosphere and the glass/plastic window. Yet still there was enough left that it moved the molecules in my skin.</p>
<p>It is an amazing universe we live in. Fucked up, yes. But amazing.</p>
<p>Finally: Yes, I will do something about all the mushroom pictures.</p>
<hr />
<p>Also, some good links my partner has sent on talking to kids about the outcome of the election:</p>
<ul>
<li><a href="http://www.notimeforflashcards.com/2016/11/what-do-i-tell-my-children-in-the-morning.html">What Do I Say to My Kids in the Morning?</a></li>
<li><a href="http://www.newsday.com/opinion/columnists/randi-marshall/what-will-we-tell-our-children-about-donald-trump-win-1.12588933">What Will We Tell Our Children?</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Divisions</title>
    <link href="http://www.ericrochester.com//posts/thoughts/divisions/index.html" />
    <id>http://www.ericrochester.com//posts/thoughts/divisions/index.html</id>
    <published>2016-11-08T19:22:18Z</published>
    <updated>2016-11-08T19:22:18Z</updated>
    <summary type="html"><![CDATA[<p>Social media—and Facebook especially—has made all the facets of life painful and obvious. My feed has a range of voices: from openly racist relatives to those who’ve changed their avatars to show their support for #BlackLivesMatter, from those who still insist on gender binaries to those who’ve felt in their own bodies how untrue that polarity is.</p>
<p>I’ve kept the peace by making myself absent.</p>
<!--more-->
<p>Partially this was because some people are A-OK inflicting violence on others, usually those who have already experienced too much violence in their bodies. Partially this was because I am a little too conflict-avoidant, and I’ve had the had the privilege to indulge myself. I didn’t want to dive into those pools of sharks (with fricking laser beams!). And I didn’t think I was up to the challenge of what? Protecting? Mediating? Just being in those spaces?</p>
<p>But that needs to end.</p>
<p>As a cishet white male, theoretically my voice isn’t exactly missing from important discussions, but maybe my voice will reach someone no one else has gotten through to. Or better yet, maybe I can amplify someone else’s voice.</p>
<p>So what are the parts of me that I’ve been keeping apart? Like the people populating my timeline, they run the gamut: computer programming, medieval literature, genre literature, poetry, spirituality, science, digital humanities, environmental justice, feminism, ethical adoption. I could go on. It’s all there.</p>
<p>This is partially growing out of an article by Parker Palmer, <a href="http://www.couragerenewal.org/parker/writings/divided-no-more/" title="Divided No More">“Divided No More: A Movement Approach to Educational Reform”</a>. He talks about the power of movements to “rewrite the logic of organizations.” The first step in this process is that “Isolated individuals decide to stop leading ‘divided lives.’”</p>
<p>This starts from a deeply personal decision to bring your inner and outer worlds into better alignment, and to so reduce your inner tension and conflict. But as more and more people begin to make this shift and as they begin to connect with each other, a movement is grows. And this can create structural, organizational, and cultural changes.</p>
<p>Palmer points out that a vital part of this process is going public.</p>
<p>Part of this is also the conviction that one prism to look at social justice work through is the prism of creating wholeness and health, particularly in oppressed individuals and communities. But that health has to come at all levels. Sick individuals or unhealthy communities cannot create a whole society. And likewise, an unsafe community or an unjust society will infect the individuals it holds. This is to be a step toward wholeness and, hopefully, health.</p>
<p>So.</p>
<p>I’m tired of the divisions. I’m tired of the walls. I’m getting rid of them. And I’m talking about it.</p>
<p>Except I’m not getting rid of the walls entirely. Rightly used, boundaries are healthy and health-maintaining. I’m not moving this discussion onto Facebook. It’s all happening here, where I have control. I may move the discussion into other places later, but I’m starting here.</p>
<p>Tonight of all nights, as I suffer. As I watch the women in my life suffer. As I watch the people of color in my life suffer. As I watch my LGBTQ friends suffer and my Muslim friends suffer and my immigrant friends suffer. As I watch so many afraid. I have to make to a stand. I have to say who I support and who I fight with.</p>
<p>Fight on.</p>]]></summary>
</entry>
<entry>
    <title>Validating Data with Types</title>
    <link href="http://www.ericrochester.com//posts/code/validating-data-with-types/index.html" />
    <id>http://www.ericrochester.com//posts/code/validating-data-with-types/index.html</id>
    <published>2015-05-22T17:00:00Z</published>
    <updated>2015-05-22T17:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This is cross posted at the <a href="http://scholarslab.org/uncategorized/validating-data-with-types/">Scholars’ Lab Blog</a>.</em></p>
<p>Recently, I had to opportunity to help <a href="http://politics.virginia.edu/node/181" title="J. Warren York">J. Warren York</a>, a graduate student in the Department of Politics here at UVa. He’s looking at how tax law affects political contributions and advocacy, so this was an interesting project that may tell us something useful about how the US government works [insert your favorite broken-government joke here].</p>
<!--more-->
<p>To do this, he needed to download data from a number of different sources in different formats (JSON, YAML, and CSV), pull it all apart, and put some of it back together in a couple of new data files. One of those sources is the <a href="http://data.stanford.edu/dime" title="Database on Ideology, Money in Politics, and Elections">Database on Ideology, Money in Politics, and Elections (DIME)</a>. The data from them tells how much people and organizations have contributed to various candidates, PAC, and other groups.</p>
<p>And while I’ve seen worse, it wasn’t the cleanest data file out there. (To get an idea of what the data looks like, you can see a sample of 100 rows from this data file in <a href="https://docs.google.com/spreadsheets/d/1-m_8pm_s2gfpSAkMF0IYHNjKvWjqDe2d__CrbpjBxFA/edit?usp=sharing" title="Sample Data">this Google Sheet</a>.)</p>
<p>For most projects that I’m reasonably sure that I’ll be the only developer on, I use <a href="https://www.haskell.org/" title="Haskell Programming Language">Haskell</a>. This is a <a href="http://en.wikipedia.org/wiki/Functional_programming" title="Functional Programming on Wikipedia">functional</a>, <a href="http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages" title="Stack Overflow on What is the difference between statically typed and dynamically typed languages?">statically typed</a> programming language with a (partially deserved) reputation for being difficult. However, I find that it gives me a nice balance of safety and flexibility, of power and expressiveness.</p>
<p>Given Haskell’s reputation, the previous sentence probably seems to border on insanity. Hopefully this post will prove this at least partially correct and will highlight some of the nicer aspects of working in Haskell. It leverages types to provide some assurances that the data is well-formed and consistent. This means I can perform data validation quickly and easily, and that helps everyone.</p>
<blockquote>
<p>This post is actually runnable Haskell. If you have the <a href="https://www.haskell.org/ghc/" title="GHC Haskell Compiler">GHC</a> compiler installed you can copy and paste this post into a file, say <code>Validating.lhs</code>, and run it from the command line:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">runhaskell</span> Validating.lhs contribDB_1982.csv</code></pre></div>
<p>However, to follow this post, you don’t need to know Haskell. I’ll try to explain enough of the concepts and syntax that matter as they come up, so that anyone familiar with computer programming should be able to follow along without getting into the weeds of exactly what’s happening on each line.</p>
<p>So first some pre-amble and boilerplate. This just makes available the libraries that we’ll use.</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- If you want more details about the code, including brief</span>
<span class="fu">&gt;</span> <span class="co">-- explanations of the syntax, you&#39;ve come to the right place.</span>
<span class="fu">&gt;</span> <span class="co">-- Pay attention to the comments. This still isn&#39;t a tutorial</span>
<span class="fu">&gt;</span> <span class="co">-- on Haskell, but hopefully you&#39;ll have a more detailed</span>
<span class="fu">&gt;</span> <span class="co">-- understanding of what&#39;s happening.</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- First, Haskell code is kept in modules. Executable files are</span>
<span class="fu">&gt;</span> <span class="co">-- in the `Main` module.</span>
<span class="fu">&gt;</span> <span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- Import statements make the code from these modules available</span>
<span class="fu">&gt;</span> <span class="co">-- in this module. Qualified imports make the code available</span>
<span class="fu">&gt;</span> <span class="co">-- under an alias (e.g., Data.ByteString.Lazy is aliased to B).</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">B</span>
<span class="fu">&gt;</span> <span class="kw">import           </span><span class="dt">Data.Csv</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>            <span class="kw">as</span> <span class="dt">T</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector</span>          <span class="kw">as</span> <span class="dt">V</span>
<span class="fu">&gt;</span> <span class="kw">import           </span><span class="dt">System.Environment</span></code></pre></div>
<p>To validate the data, we just need to follow the same steps that we would to load it. Those steps are:</p>
<ol style="list-style-type: decimal">
<li>Define the data that you want to use;</li>
<li>Define how to read it from a row of CSV data; and</li>
<li>Read the input.</li>
</ol>
<div class="figure">
<img src="http://scholarslab.org/wp-content/uploads/2015/03/gnomes_plan.gif" alt="Profit!" />
<p class="caption">Profit!</p>
</div>
<p>That’s it. In fact, the last item is so inconsequential that we’ll skip it. But let’s see how the rest of it works.</p>
<h2 id="defining-the-data">Defining the Data</h2>
<p>First we need to define the data. We do this using <em>types</em>. If you only know languages like Ruby, JavaScript, or Python, you may be unfamiliar with types. Basically, they specify what your data will look like. For example, they might specify that a <code>Person</code> data instance has a <code>name</code> string field and an <code>age</code> integer field.</p>
<p>If you come from Java or C#, you know what types are, but Haskell uses them very differently. In Haskell, types are used to express, encode, and enforce the requirements of your program as much as possible. The guideline is that invalid program states should not be expressible in the types you define. To help with that, some of the loopholes in Java’s type system have been closed (looking at you, <code>null</code>): this makes these specifications more meaningful. And because Haskell employs type inference, you also don’t need to actually declare the type of every little thing, so you get more benefit for less work.</p>
<p>In short, types are how we specify what data we’re interested in.</p>
<p>At this point in the process, programming in Haskell is a typical data modeling exercise. But it’s also the foundation for the rest of this post, so we’ll linger here.</p>
<p>Before we define the data types, we’ll first define some aliases. These aren’t really enforced, but they make the data types that use these more clear.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">OrgName</span> <span class="fu">=</span> <span class="dt">T.Text</span>
<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">Year</span>    <span class="fu">=</span> <span class="dt">Int</span>
<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">Amount</span>  <span class="fu">=</span> <span class="dt">Double</span></code></pre></div>
<p>The first data type that we’ll create is <code>Party</code>. This will be similar to enumerations in other languages, but in Haskell they’re just regular data types. A <code>Party</code> can be either a <code>Dem</code> (Democrat), <code>GOP</code> (Republican), <code>Independent</code>, or <code>Unknown</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This statement says that you can make a value of type Party </span>
<span class="fu">&gt;</span> <span class="co">-- using any of the constructors listed (separated by pipes).</span>
<span class="fu">&gt;</span> <span class="co">-- In this case, none of the constructors take extra data, so</span>
<span class="fu">&gt;</span> <span class="co">-- the semantics comes soley from which constructor is chosen.</span>
<span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">Party</span> <span class="fu">=</span> <span class="dt">Dem</span> <span class="fu">|</span> <span class="dt">GOP</span> <span class="fu">|</span> <span class="dt">Independent</span> <span class="fu">|</span> <span class="dt">Unknown</span></code></pre></div>
<p>We want to know what kind of entity is receiving the contribution. However, we don’t actually care about who the recipient was: we just want to distinguish between candidates, committees, and state-level elections. We’ll use the <code>ContribEntry</code> data type for this information.</p>
<p>The following declaration states that a <code>ContribEntry</code> can be either a <code>Candidate</code>, which must have year information and party information; a <code>Committee</code>, which must have only a year; or a <code>StateLevel</code>, which must have a year and a state code.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This shows how values are given types. `contribYear ::</span>
<span class="fu">&gt;</span> <span class="co">-- !Year`, says that the `contribYear` field must contain</span>
<span class="fu">&gt;</span> <span class="co">-- values of type `Year`. The exclamation mark tells the</span>
<span class="fu">&gt;</span> <span class="co">-- Haskell compiler to execute this value immediately. Unlike</span>
<span class="fu">&gt;</span> <span class="co">-- most other languages, Haskell will normally wait to</span>
<span class="fu">&gt;</span> <span class="co">-- evaluate expressions until absolutely necessary.</span>
<span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">ContribEntry</span>
<span class="fu">&gt;</span>         <span class="fu">=</span> <span class="dt">Candidate</span>  {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span>,<span class="ot"> contribParty ::</span> <span class="fu">!</span><span class="dt">Party</span> }
<span class="fu">&gt;</span>         <span class="fu">|</span> <span class="dt">Committee</span>  {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span> }
<span class="fu">&gt;</span>         <span class="fu">|</span> <span class="dt">StateLevel</span> {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span>,<span class="ot"> stateCode ::</span> <span class="fu">!</span><span class="dt">T.Text</span> }</code></pre></div>
<p>Each row of the data file will have information about a single contribution made by an individual or organization. Because we’re primarily interested in the data from organizations, this will be collected in an <code>OrgContrib</code> data type. It will hold the organization’s name (<code>orgContribName</code>), its district (<code>orgDistrict10s</code>), the contribution information (<code>orgContribEntry</code>), and the amount of the contribution (<code>orgContribAmount</code>).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">OrgContrib</span>
<span class="fu">&gt;</span>          <span class="fu">=</span> <span class="dt">OrgContrib</span>
<span class="fu">&gt;</span>          {<span class="ot"> orgContribName   ::</span> <span class="fu">!</span><span class="dt">OrgName</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgDistrict10s   ::</span> <span class="fu">!</span><span class="dt">T.Text</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgContribEntry  ::</span> <span class="fu">!</span><span class="dt">ContribEntry</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgContribAmount ::</span> <span class="fu">!</span><span class="dt">Amount</span>
<span class="fu">&gt;</span>          }</code></pre></div>
<p>That’s it. We’ve now defined the data we’re interested in. On top of the guarantees that types allow the programming language to enforce, this exercise is also helpful because it clarifies what we want from the data and helps us better understand the domain that we’re working in.</p>
<h2 id="data-from-csv">Data from CSV</h2>
<p>However, we haven’t connected this data with the CSV file yet. Let’s do that now.</p>
<p>To make this happen, we’ll need to take the data types that we just defined and define instances of <code>FromField</code> for ones that are populated from a single field, like <code>Party</code>, and <code>FromNamedRecord</code> for others, which are built from an entire row.</p>
<p><code>FromField</code> and <code>FromNamedRecord</code> are <a href="http://en.wikipedia.org/wiki/Type_class" title="Type Class on Wikipedia">type classes</a>. In object-oriented terms, these are similar to small interfaces, some only declaring one or two methods. Data types can implement the type classes that make sense, but omit the ones that do not.</p>
<p>In this case these type classes define what data types can be read from a row of CSV and how that should happen.</p>
<p><code>Party</code> is the first data type we’ll tackle. It only reads a single field, so we’ll define <code>FromField</code>. In the CSV file, the data is encoded with numeric codes, which we’ll change into <code>Party</code> values.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This defines a instance of `FromField` for `Party`.</span>
<span class="fu">&gt;</span> <span class="co">-- `parseField` is the only method. Multiple listings for this</span>
<span class="fu">&gt;</span> <span class="co">-- function, combined with the string literals in place of the</span>
<span class="fu">&gt;</span> <span class="co">-- parameter, means that the method acts as a big case</span>
<span class="fu">&gt;</span> <span class="co">-- statement on its one parameter. When the function is passed</span>
<span class="fu">&gt;</span> <span class="co">-- the string &quot;100&quot;, the first definition will be used. The</span>
<span class="fu">&gt;</span> <span class="co">-- last clause, with the underscore, is a catch-all, in which</span>
<span class="fu">&gt;</span> <span class="co">-- the parameter&#39;s value will be ignored.</span>
<span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromField</span> <span class="dt">Party</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;100&quot;</span> <span class="fu">=</span> return <span class="dt">Dem</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;200&quot;</span> <span class="fu">=</span> return <span class="dt">GOP</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;328&quot;</span> <span class="fu">=</span> return <span class="dt">Independent</span>
<span class="fu">&gt;</span>     <span class="co">-- This catch-all is probably a bad idea....</span>
<span class="fu">&gt;</span>     parseField _     <span class="fu">=</span> return <span class="dt">Unknown</span></code></pre></div>
<p>Notice my comment on the next to last line. Having a catch-all field like this introduces some <a href="http://en.wikipedia.org/wiki/Code_smell" title="Code Smell on Wikipedia">code smell</a>, and it weakens the type-safety of the field. A better practice would be to define a <code>Party</code> constructor for every numeric code and throw an error when we find something unexpected. Since we’re only interested here in two parties, that would be overkill, so in this case we’ll be more flexible.</p>
<p>Now we can define how to read <code>ContribEntry</code> data. This is complicated because we have to look at the value of the <code>recipient_type</code> field in order to figure out which constructor to use.</p>
<p>We’ll also define a utility function, <code>defaulting</code>, that defaults empty strings to a given value.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This defines the function defaulting. The first line is the</span>
<span class="fu">&gt;</span> <span class="co">-- type value. The definition of `defaulting` is a more</span>
<span class="fu">&gt;</span> <span class="co">-- complicated case statement that first tests `T.null v`</span>
<span class="fu">&gt;</span> <span class="co">-- (i.e., that it&#39;s empty), and `otherwise` is the &quot;else&quot; part</span>
<span class="fu">&gt;</span> <span class="co">-- of the statement.</span>
<span class="fu">&gt;</span><span class="ot"> defaulting ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span>
<span class="fu">&gt;</span> defaulting d v <span class="fu">|</span> T.null v  <span class="fu">=</span> d
<span class="fu">&gt;</span>                <span class="fu">|</span> otherwise <span class="fu">=</span> v
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromNamedRecord</span> <span class="dt">ContribEntry</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseNamedRecord m <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>         <span class="co">-- Read the recipient_type field. The `.:` operator</span>
<span class="fu">&gt;</span>         <span class="co">-- reads a specific field from the CSV row.</span>
<span class="fu">&gt;</span>         rtype <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;recipient_type&quot;</span>
<span class="fu">&gt;</span>         <span class="co">-- If recipient_type is empty, give it a default value</span>
<span class="fu">&gt;</span>         <span class="co">-- of &quot;CAND&quot;, and then branch on that.</span>
<span class="fu">&gt;</span>         <span class="kw">case</span> defaulting <span class="st">&quot;CAND&quot;</span> rtype <span class="kw">of</span>
<span class="fu">&gt;</span>             <span class="st">&quot;CAND&quot;</span> <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Read the cycle (year) and recipient_party fields</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 party <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;recipient_party&quot;</span>
<span class="fu">&gt;</span>                 <span class="co">-- Create a Candidate</span>
<span class="fu">&gt;</span>                 return (<span class="dt">Candidate</span> cycle party)
<span class="fu">&gt;</span>             <span class="st">&quot;COMM&quot;</span> <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Read the cycle and return a Committe</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 return (<span class="dt">Committee</span> cycle)
<span class="fu">&gt;</span>             r <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Everything else is a state-level contribution.</span>
<span class="fu">&gt;</span>                 <span class="co">-- Get the cycle and return that.</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 return (<span class="dt">StateLevel</span> cycle r)</code></pre></div>
<p>(You might be wondering why I haven’t needed to define a <code>FromField</code> for <code>Year</code> for the “cycle” fields. Remember that <code>Year</code> is just an alias for <code>Int</code>, and the CSV library already defines <code>FromField</code> for the <code>Int</code> type.)</p>
<p>We can finally define the instance for <code>OrgContrib</code>. After the complexity of <code>ContribEntry</code>, this one will be much simpler. We’ll extract the values for a few fields, parse the <code>ContribEntry</code>, and then create and return the <code>OrgContrib</code> value.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromNamedRecord</span> <span class="dt">OrgContrib</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseNamedRecord m <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>         name     <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;contributor_name&quot;</span>
<span class="fu">&gt;</span>         district <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;contributor_district_10s&quot;</span>
<span class="fu">&gt;</span>         contrib  <span class="ot">&lt;-</span> parseNamedRecord m
<span class="fu">&gt;</span>         amount   <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;amount&quot;</span>
<span class="fu">&gt;</span>         return (<span class="dt">OrgContrib</span> name district contrib amount)</code></pre></div>
<p>With these in place, we can read the data and have it verified at the same time. For example, if the file reads correctly, I know that the <code>Year</code> data are integers and that <code>Party</code> fields contain valid data.</p>
<p>And that’s really all there is to it. Below the end of the article, I’ve included a function to read the CSV data from a file and the <code>main</code> function, which controls the whole process. However, reading and validating the data has already been taken care of.</p>
<p>Of course, while these types provide reasonable validation, you could get much better, depending on how you define your types and how you parse the incoming data. (For example, you could only allow valid state codes for <code>StateLevel</code> or limit years to a given range.)</p>
<p>If you’re wondering about tests, the implementations of <code>FromField</code> and <code>FromNamedRecord</code> would be good to have tests for. However, the parts of the program’s requirements that are enforced in the types don’t really need testing; for example, I wouldn’t test that party fields will always be parsed as a <code>Party</code>.</p>
<p>Types also come in handy in other circumstances: when you’ve left the code for a while and need to get back into it, they provide a minimum amount of guidance; and when you need to refactor, they act as a base-line set of regression tests, to tell you when you’ve broken something.</p>
<p>Overall, I find that this small program shows how Haskell can provide a lot of power and expressivity for relatively little code.</p>
<p>But the immediate benefit in this case is that I was able to provide John more assurances about his data, and to provide them more quickly. It’s a nice example of leveraging types to write better programs that provide real-world benefits.</p>
<p>The full code for this project is in my <a href="https://github.com/erochest/popvox-scrape" title="The Popvox Scrape Repository">popvox-scrape</a> repository. Feel free to check it out.</p>
<hr />
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> readData ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">Header</span>, <span class="dt">V.Vector</span> <span class="dt">OrgContrib</span>))
<span class="fu">&gt;</span> readData filename <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>     rawData <span class="ot">&lt;-</span> B.readFile filename
<span class="fu">&gt;</span>     return (decodeByName rawData)
<span class="fu">&gt;</span>
<span class="fu">&gt;</span><span class="ot"> main ::</span> <span class="dt">IO</span> ()
<span class="fu">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>     args <span class="ot">&lt;-</span> getArgs
<span class="fu">&gt;</span>     <span class="kw">case</span> args <span class="kw">of</span>
<span class="fu">&gt;</span>         [filename] <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>             dataRows <span class="ot">&lt;-</span> readData filename
<span class="fu">&gt;</span>
<span class="fu">&gt;</span>             <span class="kw">case</span> dataRows <span class="kw">of</span>
<span class="fu">&gt;</span>                 <span class="dt">Left</span> err <span class="ot">-&gt;</span> putStrLn (<span class="st">&quot;ERROR: &quot;</span> <span class="fu">++</span> err)
<span class="fu">&gt;</span>                 <span class="dt">Right</span> (_, rows) <span class="ot">-&gt;</span> putStrLn (  <span class="st">&quot;SUCCESS: &quot;</span>
<span class="fu">&gt;</span>                                             <span class="fu">++</span> show (V.length rows)
<span class="fu">&gt;</span>                                             <span class="fu">++</span> <span class="st">&quot; read.&quot;</span>)
<span class="fu">&gt;</span>
<span class="fu">&gt;</span>         _ <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;usage: runhaskell Validate.lhs data-file.csv&quot;</span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Omeka, Neatline, Mac, development, oh my!</title>
    <link href="http://www.ericrochester.com//posts/code/omeka-neatline-ansible/index.html" />
    <id>http://www.ericrochester.com//posts/code/omeka-neatline-ansible/index.html</id>
    <published>2014-08-29T20:30:00Z</published>
    <updated>2014-08-29T20:30:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This is cross posted at <a href="http://www.scholarslab.org/uncategorized/omeka-neatline-mac-development-oh-my/">The Scholars’ Lab Blog</a>.</em></p>
<p>At the Scholars’ Lab, we’re big big advocates of Open Source. All of our projects are available freely and openly on <a href="https://github.com/">Github</a>, and we’re always more than happy to accept pull requests. We’d like to be able to empower everyone to contribute to our projects as much as they’re able to and comfortable with.</p>
<!--more-->
<p>Unfortunately, one of our flagship projects, <a href="http://neatline.org/">Neatline</a>, isn’t easy to contribute to. There are a number of reasons for this, but one is that the development environment is not trivial to get set up. In order to address this and make it easier for others to contribute, we’ve developed an <a href="http://www.ansible.com/">Ansible</a> playbook that takes a not-quite-stock Mac and sets up an instance of Omeka with the Neatline plugin available, as well as all the tools necessary for working on Neatline.</p>
<p><a href="http://www.ansible.com/">Ansible</a> is a system for setting up and configuring systems. It’s often used to set up multiple servers—for instance, a database server and a static web server, both working with a dynamic web applications deployed on several computers. If you’re familiar with <a href="http://www.getchef.com/">Chef</a> or <a href="http://puppetlabs.com/">Puppet</a>, Ansible solves the same problems. In this case, we’ll use it to configure our local development workstation.</p>
<p>We’ve published these playbooks on <a href="https://github.com/">Github</a> in the <a href="https://github.com/erochest/neatline.dev/tree/mac-ansible"><code>neatline.dev</code> repository, on the <code>mac-ansible</code> branch</a>. You can get this by cloning it to your local machine. (Since this is for getting started developing Neatline, I assume that you’re already comfortable with <a href="http://git-scm.com/">git</a>. If not, <a href="http://rogerdudler.github.io/git-guide/">there</a> <a href="https://try.github.io/">are</a> <a href="http://www.git-tower.com/learn/">lots</a> <a href="http://gitimmersion.com/">of</a> <a href="http://www.vogella.com/tutorials/Git/article.html">great</a> <a href="http://git-scm.com/book">tutorials</a>.)</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">git</span> clone --branch mac-ansible https://github.com/erochest/neatline.dev.git</code></pre></div>
<h2 id="requirements">Requirements</h2>
<p>In creating this, I’ve aimed for starting from a stock Mac. And I missed pretty badly. However, the necessary prerequisites are minimal. You’ll just need to have these things installed.</p>
<ul>
<li><a href="https://itunes.apple.com/us/app/xcode/id497799835">XCode</a></li>
<li><a href="http://brew.sh/">Homebrew</a></li>
</ul>
<p>Once those two are on your machine, you can install the other two dependencies. These are available through <a href="http://brew.sh/">Homebrew</a>. So open Terminal and type these lines:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">brew</span> install python
$ <span class="ex">brew</span> install ansible</code></pre></div>
<p>That’s all. You should be ready to go.</p>
<h2 id="settings">Settings</h2>
<p>This project includes a number settings that you can change to customize your installation. Those are found in the file <a href="https://github.com/erochest/neatline.dev/blob/mac-ansible/playbook.yaml"><code>playbook.yaml</code></a>. The relevant section is labelled <code>vars</code>, and it allows you to set information about the Omeka database (<code>omeka_db_user</code>, <code>omeka_db_password</code>, and <code>omeka_db_name</code>), which version of Omeka you wish to use (<code>omeka_version</code>), where you wish to install it (<code>omeka_dir</code>), and where you want to point your browser to (<code>dev_hostname</code>) as you’re working on the site. The defaults are:</p>
<div class="sourceCode"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span class="fu">vars:</span>
  <span class="fu">db_user:</span> root
  <span class="fu">db_password:</span>
  <span class="fu">omeka_db_user:</span> omeka
  <span class="fu">omeka_db_password:</span> omeka
  <span class="fu">omeka_db_name:</span> omeka
  <span class="fu">dev_hostname:</span> omeka-neatline.dev
  <span class="fu">omeka_dir:</span> <span class="st">&quot;{{ ansible_env.HOME }}/omeka/neatlinedev&quot;</span>
  <span class="fu">omeka_version:</span> stable-2.1
  <span class="fu">debug:</span> true
  <span class="fu">neatline_repo:</span> git@github.com:scholarslab/Neatline.git
  <span class="fu">php_version:</span> 55</code></pre></div>
<p>Change these to reflect what you’d like your personal Omeka/Neatline installation to look like.</p>
<p>One option that I’ll call out in particular is <code>neatline_repo</code>. This is the git repository that you’ll be working with. If you’re using github to host your project, you can <a href="https://help.github.com/articles/fork-a-repo">fork</a> the primary Neatline repository (from the URL given above). And when you’ve completed your work, if you’d like to contribute back, you can send us a <a href="https://help.github.com/articles/using-pull-requests">pull request</a> through the Github site.</p>
<h2 id="setting-up">Setting Up</h2>
<p>Finally, we’re ready to actually create the system. This is quite easy. In the Terminal, from the <code>neatline.dev</code> directory, run the <code>neatline-dev</code> script.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="bu">cd</span> neatline.dev
$ <span class="ex">./neatline-dev</span></code></pre></div>
<p>Now wait.</p>
<p>After your computer whirs away for a while, you’ll get your prompt back. When that happens, you should be able to point your browser to http://omeka-neatline.dev (in the example above). There you’ll see the Omeka installation form.</p>
<h2 id="what-just-happened">What Just Happened?</h2>
<p>The Ansible playbook does a number of tasks.</p>
<ol style="list-style-type: decimal">
<li>It installs all the dependencies that you’ll need, including <a href="http://php.net/">PHP</a>, <a href="http://nodejs.org/">NodeJS</a>, and <a href="http://www.mysql.com/">MySQL</a>.</li>
<li>It sets MySQL to start automatically when you log in, and it creates the Omeka MySQL user and database.</li>
<li>It configures <a href="http://httpd.apache.org/">Apache</a> to work with PHP and to find your Omeka directory.</li>
<li>It downloads and configures <a href="http://omeka.org/">Omeka</a> and turns on debugging.</li>
<li>It clones <a href="http://neatline.org/">Neatline</a> into Omeka’s <code>plugin</code> directory.</li>
<li>It initializes <a href="https://github.com/nvie/gitflow">git flow</a> for working in Neatline and leaves you on the <code>develop</code> branch.</li>
<li>And it installs the necessary JavaScript and PHP tools, including <a href="http://gruntjs.com/">Grunt</a>, <a href="http://bower.io/">Bower</a>, <a href="https://getcomposer.org/">Composer</a>, and <a href="http://phpunit.de/">PHPUnit</a>.</li>
</ol>
<p>After all that, it really needs a break.</p>
<p>You probably do too.</p>
<h2 id="future">Future</h2>
<p>Unfortunately, that’s only the first step that we need to take to make the Neatline code-base approachable. Some more things that we have planned include:</p>
<ul>
<li>Documentation on all the moving parts.</li>
<li>Documentation on the overall architecture of Neatline.</li>
<li>Documentation on the code. What’s where? If you wish to change something, where would you find it?</li>
</ul>
<p>As we get those parts in place, we’ll keep you posted.</p>]]></summary>
</entry>
<entry>
    <title>Mastering Clojure Data Analysis</title>
    <link href="http://www.ericrochester.com//posts/announcements/clj-data-master/index.html" />
    <id>http://www.ericrochester.com//posts/announcements/clj-data-master/index.html</id>
    <published>2014-06-04T07:36:58Z</published>
    <updated>2014-06-04T07:36:58Z</updated>
    <summary type="html"><![CDATA[<p><img class="bookframe" src="http://dgdsbygo8mp3h.cloudfront.net/sites/default/files/imagecache/productview/4139OS.jpg"/></p>
<p>After a few delays, I’m pleased to announce the release of <a href="http://j.mp/McDla"><em>Mastering Clojure Data Analysis</em></a>.</p>
<!--more-->
<p>This book is a case study of ten different data analysis topics using Clojure. It applies a number of Clojure and Java libraries to an assortment data analysis and machine learning techniques.</p>
<p>To give you a taste of what it covers, here is the table of contents:</p>
<ol style="list-style-type: decimal">
<li>Network Analysis – The Six Degrees of Kevin Bacon</li>
<li>GIS Analysis – Mapping Climate Change</li>
<li>Topic Modeling – Changing Concerns in the State of the Union Addresses</li>
<li>Classifying UFO Sightings</li>
<li>Benford’s Law – Detecting Natural Progressions of Numbers</li>
<li>Sentiment Analysis – Categorizing Hotel Reviews</li>
<li>Null Hypothesis Tests – Analyzing Crime Data</li>
<li>A/B Testing – Statistical Experiments for the Web</li>
<li>Analyzing Social Data Participation</li>
<li>Modeling Stock Data</li>
</ol>
<p>And from the book’s blurb:</p>
<blockquote>
<p>Mastering Clojure Data Analysis teaches you how to analyze and visualize complex datasets. With this book, you’ll learn how to perform data analysis using established scientific methods with the modern, powerful Clojure programming language with the help of exciting examples drawn from real-world data. This will help you get to grips with advanced topics such as network analysis, the characteristics of social networks, applying topic modeling to get a handle on unstructured textual data, and GIS analysis to apply geospatial techniques to your data analysis problems.</p>
<p>With this guide, you’ll learn how to leverage the power and flexibility of Clojure to dig into your data and access the insights it hides.</p>
</blockquote>
<p>If this sounds interesting, check it out on <a href="http://j.mp/McDla">Packt’s website</a> or on <a href="http://www.amazon.com/gp/product/B00KLAJ66S/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00KLAJ66S&amp;linkCode=as2&amp;tag=httpwwwericro-20&amp;linkId=JK7FNAPWBI467EIC">Amazon</a>.</p>
<p>Also in the book, I mentioned a couple of datasets that are available on this site. You can find them on <a href="/clj-data-master/">the page for this book</a>.</p>
<hr />
<p>I do this in the book, but I’d like to take a minute here to publicly thank the editorial team at Packt who worked with me. The reviewers were also invaluable. They put a lot of effort into helping me see where the very rough first draft needed more attention. Any shortcomings still in the book are entirely my own.</p>
<p>And most of all, I’d like to thank my family. They put up with my inattention, and I appreciate their patience, understanding, support, and love.</p>
<!--
<a href="http://www.amazon.com/gp/product/B00KLAJ66S/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00KLAJ66S&linkCode=as2&tag=httpwwwericro-20&linkId=JK7FNAPWBI467EIC">Mastering Clojure Data Analysis</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=httpwwwericro-20&l=as2&o=1&a=B00KLAJ66S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
-->]]></summary>
</entry>
<entry>
    <title>Software Development for the MA Humanities Student</title>
    <link href="http://www.ericrochester.com//posts/alt-ac/software-ma-humanities-student/index.html" />
    <id>http://www.ericrochester.com//posts/alt-ac/software-ma-humanities-student/index.html</id>
    <published>2014-02-27T15:00:00Z</published>
    <updated>2014-02-27T15:00:00Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>This was originally posted on <a href="http://www.scholarslab.org/uncategorized/software-development-for-the-ma-humanities-student/">the Scholars’ Lab blog</a>. I’ve cross posted it here.</p>
</blockquote>
<p>
This is <em>not</em> a transcript of a brief panel talk I gave for the UVa <a href="http://graduate.engl.virginia.edu/gesa/">Graduate English Student Association</a> Career Panel. It’s based on what I hope to say, but I’m actually writing this before the event so it (and its links) can be available beforehand.
</p>
<!--more-->
<h1 id="about-me">
About me
</h1>
<p>
I’ve been interested in two things for about as long as I can remember: computers and literature. These intersected a little in science fiction and fantasy, but largely, the two obsessions remained strangely separate. I’d spent a lot of time reading, both “literature” and “trash”; but I’d also enjoyed playing computer games and trying to program my own.
</p>
<p>
It wasn’t until half-way through my PhD program at <a
href="http://www.uga.edu/">The University of Georgia</a> that my interests started to come together. Initially, I just had a reputation for being able to help people format columns in Word. Then I got involved in digital humanities, then called humanities computing. I also created a website for a professor, and later I started doing web development and systems administration for the <a
href="http://www.lap.uga.edu/">Linguistic Atlas Projects</a>.
</p>
<p>
Although these jobs weren’t my primary focus in graduate school, I did take them seriously. I learned best practices, including version control and testing. This was good for the project, but it was also good for me: doing things right up front saved me pain and sweat later.
</p>
<p>
And this was how my two interests finally found common ground.
</p>
<p>
When I graduated I took a job doing a combination of corpus linguistics and software development. This was good, but when I needed to look for another job, I found that there were fewer options for corpus linguistics than for web development.
</p>
<p>
So I made web sites for a few years. I had a lot of fun, and I learned a lot, both about the work itself and about interacting with clients and stakeholders.
</p>
<p>
For the last almost three years, I’ve been senior developer here at the <a
href="http://www.scholarslab.org/">Scholars’ Lab</a>. What does that entail?
</p>
<ul>
<li>
<strong>Software development</strong>: True to my title, a lot of what I do involves developing and maintaining computer systems and web sites.
</li>
<li>
<strong>Mentoring and education</strong>: Our biggest focus is education and mentoring. Sometimes that means helping someone who walks in with a digital project. More often it involves helping one of the Scholars’ Lab’s fellows or one of the students in the <a href="http://praxis.scholarslab.org/">Praxis Program</a>.
</li>
<li>
<strong>Documentation</strong>: An important—but often overlooked—aspect of software projects is their documentation. We don’t spend enough time on this.
</li>
</ul>
<p>
That’s not all, but those three is probably how I spend most of my time.
</p>
<h1 id="what-kind-of-work-are-we-talking-about">
What Kind of Work are we Talking about?
</h1>
<p>
I’m a software developer, so I’ve necessarily focused on that in talking about my personal journey. However, software projects are large, sprawling, complex behemoths, and there are a lot of different tasks that need to be done and a lot of different specialties that are required to contribute. So even if writing code doesn’t appeal to you, other things might.
</p>
<ul>
<li>
<strong>Project management</strong>: Keep everyone on track.
</li>
<li>
<strong>Community outreach</strong>: Publicize the project and be an active member of the project’s community.
</li>
<li>
<strong>Design</strong>: Make the product usable.
</li>
<li>
<strong>Documentation</strong>: A different way to make the product usable.
</li>
<li>
<strong>Testing</strong>: Check that the product works and works correctly.
</li>
</ul>
<blockquote>
<p>
Gina Trapani has an excellent post talking about how crucial—but also how under-valued—many tasks are in a software project, especially in the open source world. You can read about it at <a
href="http://smarterware.org/7550/designers-women-and-hostility-in-open-source">Designers, Women, and Hostility in Open Source</a>.
</p>
</blockquote>
<h1 id="what-advantages-do-you-have">
What Advantages do you Have?
</h1>
<p>
Typically, people expect those in any technical job to have a STEM background. This is false, and in fact, a humanities background can be a great asset in almost any job in software development.
</p>
<p>
Let me count the ways.
</p>
<ul>
<li>
<strong>Communication</strong> This point is trite, but it’s true. At a fundamental level programming involves communicating. Your code must communicate to the computer, to other developers, and even to your future self. You’ll also need to communicate effectively to clients, to your boss, and to co-workers.
</li>
<li>
<strong>Education and Negotiation</strong> An important part of software development involves educating and negotiating with others. For example, adding a feature may involve dropping another one. This doesn’t make clients happy, and you’ll need to explain why and argue your case.
</li>
<li>
<strong>Research</strong> Learning new technologies as well as using ones you’re already familiar with both involve a lot of research. Knowing how to learn and how to research is an important asset here.
</li>
<li>
<strong>Reading and interpretation</strong> Most programmers work from specification documents. Being able to interpret them appropriately is crucial.
</li>
<li>
<strong>Multi-level focus</strong> I’m not sure what to call this point, but it may be the most important one. When you analyze literature you must command details from a variety of texts and sources and synthesize them to make a larger point. This involves paying attention to both the forest and the trees. Writing software involves the same split focus: on the one hand, you spend a lot of time in the weeds thinking about semicolons; on the other hand, you must keep the big picture in mind to stay on track and on schedule.
</li>
</ul>
<blockquote>
<p>
For some of the same points, plus some others, see Shelby Switzer’s post on <a
href="http://shelbyswitzer.com/humanities_degrees_help_programmers/">How my “impractical” humanities degree prepared me for a career in programming</a>.
</p>
</blockquote>
<h1 id="what-can-you-be-doing">
What Can you be Doing Now?
</h1>
<p>
Obviously, finish your degree. This is the most important thing you can do.
</p>
<p>
But in your spare time (ha!), there are some other things you can do, both now and in the future. (Again, apologies: this list is for software programmers, especially web developers.)
</p>
<ul>
<li>
<strong>Learn the basics</strong> For web development, design, etc., this means learning HTML, CSS, and JavaScript. <a
href="http://www.codecademy.com/">CodeAcademy</a>, <a
href="https://www.codeschool.com/">Code School</a>, and <a
href="http://code.tutsplus.com/">tuts+</a> are all good. The main thing is to type along yourself.
</li>
<li>
<strong>Learn a Web Language</strong> Essentially, you want something you can use to interact with a database and dynamically generate web pages. This could be <a href="http://nodejs.org/">JavaScript using NodeJS</a>, <a
href="https://www.ruby-lang.org/">Ruby</a>, or <a
href="http://www.python.org/">Python</a>. Any of these are good. If there’s one available for your language of choice, the <a
href="http://learncodethehardway.org/">Learn Code the Hard Way</a> series is excellent.
</li>
<li>
<strong>Learn a Web Framework</strong> Find one based on the language you picked in the previous point. For JavaScript, that means <a
href="http://expressjs.com/">Express</a> or <a
href="http://sailsjs.org/">Sails</a>. For Ruby, <a
href="http://rubyonrails.org/">Ruby on Rails</a> or <a
href="http://www.sinatrarb.com/">Sinatra</a>. For Python, <a
href="https://www.djangoproject.com/">Django</a> or <a
href="http://flask.pocoo.org/">Flask</a>.
</li>
</ul>
<p>
If you’re just getting started, don’t worry about getting a broad knowledge of different technologies. All of them are similar. You’ll be better served by going deep into one choice. What you learn will apply to the other systems, and you can learn them later when required.
</p>
<p>
Also, learn the tools you’ll use to work in these languages. Learn them thoroughly and learn them well. You’re going to live in them.
</p>
<ul>
<li>
<strong>A text editor</strong> This is probably the single-most important tool for a software developer. Know it inside and out. Know all of its tricks. <a href="http://www.sublimetext.com/">Sublime Text</a> is a popular choice right now.
</li>
<li>
<strong>Version control</strong> Programmers use version control systems to track the changes they make to their code. <a
href="http://git-scm.com/">Git</a> is a very popular choice, and <a
href="https://github.com/">Github</a> allows you to share your code and collaborate with others.
</li>
<li>
<strong>Online documentation</strong> Find the documentation for your programming language, its libraries, and the web framework you’re using. Also <a href="http://stackoverflow.com/">StackOverflow</a> is a popular site for asking questions related to software development.
</li>
</ul>
<p>
Finally, <strong>get your work out there</strong>. There’s never been a better time for this than right now. You can put your code online for others to see on <a href="https://github.com/">Github</a>. You can also run web apps quickly and easily using <a href="http://www.heroku.com/">Heroku</a>. Having code up on these makes it easy for potential employers to see your skills. It also lets them know that you’re active and learning and capable. They won’t replace a good portfolio that directs potential employers’ attention and highlights your best work, but they are a good start, and they’ll set up above most other applicants.
</p>
<p>
In general, this is a great time to go into software development and other technical jobs. Hopefully this post tells you what you need to think about and plan for.
</p>]]></summary>
</entry>
<entry>
    <title>A Simple Dataflow System</title>
    <link href="http://www.ericrochester.com//posts/code/a-simple-dataflow-system/index.html" />
    <id>http://www.ericrochester.com//posts/code/a-simple-dataflow-system/index.html</id>
    <published>2013-06-05T14:16:02Z</published>
    <updated>2013-06-05T14:16:02Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p><em>This is a recipe that I wrote for the <a href="/pages/announcements/clj-data-analysis/index.html"><em>Clojure Data Analysis Cookbook</em></a>. However, it didn’t make it into the final book, so I’m sharing it with you today.</em></p>
</blockquote>
<p>When working with data, it’s often useful to have a computer language or DSL that allows us to express how data flows through our program. The computer can then decide how best to execute that flow, whether it should be spread across multiple cores or even multiple machines.</p>
<!--more-->
<p>This style of programming is called <a href="http://en.wikipedia.org/wiki/Dataflow_programming"><strong>dataflow programming</strong></a>. There are a couple of different ways of looking at dataflow programming. One way describes it as being like a spreadsheet. We declare relationships between cells, and a change in one cell percolates through the graph.</p>
<p>Another way of looking at it is as a graph that captures the computation. Each computation is a node, and the data flows between them. After we build the computation graph, we tell the computer to run it how it seems best. It could distribute the computations across cores or even across computers in a network.</p>
<p>And guess what? Clojure itself allows that kind of expression, especially with the threading macros (<code>-&gt;</code> and <code>-&gt;&gt;</code>). Reducers handle parallelization under the covers. Let’s see how far we can take that.</p>
<h3 id="getting-ready">Getting ready…</h3>
<p>To use reducers, we first need to depend on Clojure 1.5. We’ll need this in our <a href="http://leiningen.org/">Leiningen</a> <a href="project.clj"><code>project.clj</code></a> file:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span class="at">:dependencies</span> [[org.clojure/clojure <span class="st">&quot;1.5.1&quot;</span>]]</code></pre></div>
<p>We also need to import the library, and since it defines several functions with the same name as core functions, we’ll alias it.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">require</span> &#39;[clojure.core.reducers <span class="at">:as</span> r])</code></pre></div>
<p>For this example, we’ll work with a list of the Doctor’s companions from the entire run of Doctor Who. I won’t reproduce the whole list, but here is a sample of six:</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="bu">def</span><span class="fu"> input-data</span>
  [{<span class="at">:given-name</span> <span class="st">&quot;Susan&quot;</span>, <span class="at">:surname</span> <span class="st">&quot;Forman&quot;</span>,
    <span class="at">:doctors</span> [<span class="dv">1</span>]}
   {<span class="at">:given-name</span> <span class="st">&quot;Harry&quot;</span>, <span class="at">:surname</span> <span class="st">&quot;Sullivan&quot;</span>,
    <span class="at">:doctors</span> [<span class="dv">4</span>]}
   {<span class="at">:given-name</span> <span class="st">&quot;Nyssa&quot;</span>, <span class="at">:surname</span> nil,
    <span class="at">:doctors</span> [<span class="dv">4</span> <span class="dv">5</span>]}
   {<span class="at">:given-name</span> <span class="st">&quot;Melanie&quot;</span>, <span class="at">:surname</span> <span class="st">&quot;Bush&quot;</span>,
    <span class="at">:doctors</span> [<span class="dv">6</span> <span class="dv">7</span>]}
   {<span class="at">:given-name</span> <span class="st">&quot;Jackson&quot;</span>, <span class="at">:surname</span> <span class="st">&quot;Lake&quot;</span>,
    <span class="at">:doctors</span> [<span class="dv">10</span>]}
   {<span class="at">:given-name</span> <span class="st">&quot;Craig&quot;</span>, <span class="at">:surname</span> <span class="st">&quot;Owens&quot;</span>,
    <span class="at">:doctors</span> [<span class="dv">11</span>]}])</code></pre></div>
<p>(If you want to use the entire dataset, you can download it from the book’s <a href="/clj-data-analysis/">data page</a> or directly from <a href="/clj-data-analysis/data/companions.clj">this link</a>.)</p>
<h3 id="how-to-do-it">How to do it…</h3>
<p>For our slightly contrived example, we’ll compute the average length of the companions’ surnames, for those who have surnames. First, we’ll need a couple of functions to accumulate the item count and sum for computing the mean. We’ll also need a function to add two accumulators’ data together. And we’ll need a function to calculate the mean from an accumulator’s data. Here are those functions.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="bu">defn</span><span class="fu"> accum-mean</span>
  <span class="st">&quot;Accumulate the sum and length of a sequence for</span>
<span class="st">  calculating the mean.&quot;</span>
  ([] {<span class="at">:sum</span> <span class="dv">0</span>, <span class="at">:n</span> <span class="dv">0</span>})
  ([{<span class="at">:keys</span> [sum n]} x]
   {<span class="at">:sum</span> (<span class="kw">+</span> sum x)
    <span class="at">:n</span> (<span class="kw">inc</span> n)}))
(<span class="bu">defn</span><span class="fu"> join-accum</span>
  <span class="st">&quot;Take the output of two calls to accum-mean and join</span>
<span class="st">  them.&quot;</span>
  ([] {<span class="at">:sum</span> <span class="dv">0</span>, <span class="at">:n</span> <span class="dv">0</span>})
  ([accum1 accum2]
   {<span class="at">:sum</span> (<span class="kw">+</span> (<span class="at">:sum</span> accum1) (<span class="at">:sum</span> accum2))
    <span class="at">:n</span> (<span class="kw">+</span> (<span class="at">:n</span> accum1) (<span class="at">:n</span> accum2))}))
(<span class="bu">defn</span><span class="fu"> calc-mean</span>
  <span class="st">&quot;Take the output of accum-mean or join-accum and</span>
<span class="st">  calculate the mean.&quot;</span>
  [{<span class="at">:keys</span> [sum n]}]
  (<span class="kw">double</span> (<span class="kw">/</span> sum n)))</code></pre></div>
<p>With these in place, we can define a function that creates a reducer that returns the length of the surnames, filtering out those with no surname. Combined with a threading macro, this makes a very clear dataflow.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="bu">defn</span><span class="fu"> process-seq</span>
  [coll]
  (<span class="kw">-&gt;&gt;</span>
    coll
    (r/map <span class="at">:surname</span>)
    (r/filter #(<span class="kw">not</span> (<span class="kw">nil?</span> %)))
    (r/map <span class="kw">count</span>)))</code></pre></div>
<p>First we can run that with the core reduce function to execute it sequentially.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">user=&gt; (calc-mean (<span class="kw">reduce</span> accum-mean (accum-mean) 
                          (process-seq input-data)))
<span class="fl">5.4</span></code></pre></div>
<p>But by changing from reduce to <a href="http://clojure.github.io/clojure/clojure.core-api.html#clojure.core.reducers/fold"><code>clojure.core.reducers/fold</code></a>, it will automatically partition our data and spread the processing across multiple cores, even given the same input process.</p>
<div class="sourceCode"><pre class="sourceCode clojure"><code class="sourceCode clojure">user=&gt; (calc-mean (r/fold join-accum accum-mean 
                          (process-seq input-data)))
<span class="fl">5.4</span></code></pre></div>
<h3 id="how-it-works">How it works…</h3>
<p>Because it has a more complicated execution model, the <code>r/fold</code> function takes a little more information.</p>
<ol style="list-style-type: decimal">
<li><p>The <code>accum-mean</code> function takes the results of the process and turns them into an accumulator map.</p></li>
<li><p>But if <code>r/fold</code> decides to use more than one partition, those maps will need to be combined. That’s where <code>join-accum</code> comes into play.</p></li>
</ol>
<p>Both the reducer and combiner functions can be called with no parameters. In that case, both return a zero accumulator map. We use that with the <code>reduce</code> call, and <code>r/fold</code> will use it in its processing to get the starting state for the reduce and combine steps.</p>
<p>In either case, reducers allow us to create a data structure for processing the data and decide later—or let the computer decide—how best to execute the process. Meanwhile, our code remains clear and readable, and what is happening with the data is obvious. <!-- vim: set textwidth=58: --></p>]]></summary>
</entry>

</feed>
