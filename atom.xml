<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Eric Rochester</title>
    <link href="http://www.ericrochester.com//atom.xml" rel="self" />
    <link href="http://www.ericrochester.com/" />
    <id>http://www.ericrochester.com//atom.xml</id>
    <author>
        <name>Eric Rochester</name>
        <email>erochest@gmail.com</email>
    </author>
    <updated>2016-11-30T10:23:04Z</updated>
    <entry>
    <title>#FlipTheScript</title>
    <link href="http://www.ericrochester.com//posts/thoughts/flip-the-script/index.html" />
    <id>http://www.ericrochester.com//posts/thoughts/flip-the-script/index.html</id>
    <published>2016-11-30T10:23:04Z</published>
    <updated>2016-11-30T10:23:04Z</updated>
    <summary type="html"><![CDATA[<p>I’ve almost let National Adoption Month go by without comment.</p>
<p>But I can’t.</p>
<!--more-->
<p>When we were waiting to adopt our first oldest, a lot of the other people we met who were also waiting were reading adoptive mommy blogs. Think mommy blogs with a pretty saccharine adoption narrative. Those didn’t feel real to me, so instead I read adoptee blogs. The adoptive parent blogs usually referred to these as “angry adoptees.”</p>
<p>Their perspectives felt better grounded in reality.</p>
<p>It was one of the best ways I could have prepared for being an adoptive parent.</p>
<p>Maybe they are angry. But only in the best way, of being angry at the injustices of the current system and speaking out about it.</p>
<p>Looking around to gather links for this post, I have realized that I don’t listen to these voices as much as I would like to. (I think part of it is that now I primarily listen haphazardly on Twitter.)</p>
<p>I have also realized that a lot of voices that were important in my journey on this have now gone silent. I wish them well and hope that they are leading beautiful lives.</p>
<p>Anyway, here are some adoptee voices that have been personally influential. They’re not all always talking about adoption, but most do sometimes. (Since I’m mainly listening to these voices on Twitter lately, I’ve decided to list Twitter accounts, where available, not blogs.)</p>
<ul>
<li><a href="https://twitter.com/AmandaTDA">Amanda</a> is a social worker, consultant, and therapist. She also founded Lost Daughters, listed below.</li>
<li><a href="https://twitter.com/theadoptedlife">Angela</a> has a YouTube channel and a documentary on Netflix about adoption, <a href="http://www.theadoptedlife.com/">The Adopted Life</a>.</li>
<li><a href="https://twitter.com/iamadopted">Jessenia Arias</a> created and hosts <a href="http://iamadopted.net/">I am Adopted</a>.</li>
<li><a href="https://twitter.com/nicole_soojung">Nicole Chung</a> might be best known right now for co-foundering and editing the still-awesome <a href="http://the-toast.net/">The Toast</a>. She used the platform she had there to also raise issues of adoption, transracial adoption, and racial justice.</li>
<li><a href="https://twitter.com/DANakaDAN">Dan</a> is executive producer at the fun and entertaining <a href="https://www.youtube.com/isatv">ISAtv</a>, a YouTube channel about Asian Pacific American culture.</li>
<li><a href="https://landofgazillionadoptees.com/">Land of Gazillion Adoptees</a> is an ezine by and for adult adoptees.</li>
<li><a href="http://www.thelostdaughters.com/">Lost Daughters</a> is a group blog that provides a platform for adult women who were adopted as children.</li>
<li><a href="https://twitter.com/mckeekee">Kimberly McKee</a> is a researcher in Adoption Studies.</li>
<li><a href="https://twitter.com/mothermade">Mother Made</a> blogs and tweets about being a transracial adoptee and is especially eloquent about the tensions inherit in her complex identity.</li>
<li><a href="https://twitter.com/MichelleWPD">Michelle</a> uses social media to talk about both adoption and faith.</li>
<li><a href="https://twitter.com/yoonsblur">Mila</a> blogs at Lost Daughters. My family had the opportunity of hearing Mila in person a couple of times, and she’s just as powerful of a voice in real life.</li>
<li><a href="https://twitter.com/Karen_Pickell">Karen Pickell</a> is a writer, editor, and advocate. She founded <a href="http://adopteereading.com/">Adoptee Reading</a>.</li>
<li><a href="https://johnraible.wordpress.com/">John W. Raible</a> comes at this experience from all sides. He is an adoptive parent, and he researches adoption-related issues. He has been a active and tireless voice for adoptee rights, for the issues raised by transracial adoptees, and for other causes.</li>
</ul>
<p>These people all have amazing voices. Go listen to them.</p>
<p>I’ve certainly left out lots of poeple here. These are just some (not all!) that have been personally significant to me. If you know of someone I should be listening to, please let me know.</p>]]></summary>
</entry>
<entry>
    <title>Thanksgiving: Gratitude, Memorial, and Poetry</title>
    <link href="http://www.ericrochester.com//posts/notes/thanksgiving-gratitude-memorial-and-poetry/index.html" />
    <id>http://www.ericrochester.com//posts/notes/thanksgiving-gratitude-memorial-and-poetry/index.html</id>
    <published>2016-11-27T16:52:33Z</published>
    <updated>2016-11-27T16:52:33Z</updated>
    <summary type="html"><![CDATA[<p>I’m a bit conflicted by this holiday.</p>
<!--more-->
<p>On the one hand, the original day of “Thanksgiving” was a celebration of a <a href="http://www.huffingtonpost.com/richard-greener/the-true-story-of-thanksg_b_788436.html">massacre</a>, and the original pilgrims aren’t all they are sometimes <a href="https://www.manataka.org/page269.html">cracked up to be</a>. We cannot forget this. Teen Vogue, which has really been kicking it lately, also has this video:</p>
<script async src="//player.cnevids.com/embedjs/51cca0c868f9da9f40000008/video/583353aab57ac3189f00002f.js"></script>
<p>But I’m also all for gratitude.</p>
<p>So threaded around turkey and football, I attempt to hold our past in reverent memory while finding things to be grateful for the present.</p>
<p>And I pray that both the memory of the past and gratitude of the present will guide us into a better future.</p>
<p>(Of course, memory of the past and the present collide in the <a href="https://www.bustle.com/articles/196566-support-the-dakota-pipeline-protests-this-thanksgiving-in-5-ways">Standing Rock protests</a>. Not sure where hope for the future is in this, though.)</p>
<p>Some poems for today:</p>
<ul>
<li><a href="http://www.onbeing.org/blog/carrie-newcomer-three-gratitudes/8902">Three Gratitudes</a> by Carrie Newcomer.</li>
<li><a href="http://www.caapp.pitt.edu/content/ross-gay-reads-title-poem-catalog-unabashed-gratitude">Catalog of Unabashed Gratitude</a> by Ross Gay.</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Please Ignore</title>
    <link href="http://www.ericrochester.com//posts/code/please-ignore/index.html" />
    <id>http://www.ericrochester.com//posts/code/please-ignore/index.html</id>
    <published>2016-11-21T15:20:04Z</published>
    <updated>2016-11-21T15:20:04Z</updated>
    <summary type="html"><![CDATA[<p>For those who can’t read titles:</p>
<p>I’ve been interested in <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> for a while. I’m interested in the relationship between artificial languages and in how we can program more transparently. Literate programming sites at the margins of that.</p>
<p>I’ve also been playing around with <a href="http://www.purescript.org/">PureScript</a> some. It’s <a href="https://haskell-lang.org/">Haskell</a>, redesigned to remove some warts, that <a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">transpiles</a> to JavaScript. So far I haven’t used it very much, but I’d like to work with it more.</p>
<p>So creating the ability to create literate PureScript posts on this blog has been on my todo list for a while. Now that I’ve actually started posting again, I thought I’d get this going. For those who are interested and maybe morbidly curious, the changes are in <a href="https://github.com/erochest/erochest.github.com/compare/212d284670ae3355d5d40b45b11ebdb8c8a8feba...27bd636dbed225b0b803ac58cfc2e041b67943b5">this diff</a>. There are a few moving parts, but mostly I just hand things over to <a href="https://github.com/bodil/pulp">pulp</a> as much as I can.</p>
<p>Since this is a literate post, there are some formailities to get started:</p>
<pre class="purescript"><code>module Main where
import Prelude
import Control.Monad.Eff (Eff)
import Control.Monad.Eff.Console (CONSOLE, log)
import Data.Nullable (toMaybe)
import Data.Traversable (traverse)
import DOM (DOM)
import DOM.HTML (window)
import DOM.HTML.Types (htmlDocumentToDocument, htmlDocumentToParentNode)
import DOM.HTML.Window (document)
import DOM.Node.Document (createTextNode)
import DOM.Node.Node (appendChild)
import DOM.Node.NodeList (item)
import DOM.Node.ParentNode (querySelectorAll)
import DOM.Node.Types (textToNode)</code></pre>
<p>(If this all seems a little verbose, I’m using a <em>very</em> low-level interface here. For anything more complicated, you’d want to use a higher-level library.)</p>
<p>There are still some things to do on this:</p>
<ul>
<li>Syntax color highlighting;</li>
<li>The code doesn’t work well with the margins;</li>
<li>The code doesn’t work well with the scalable font sizing.</li>
</ul>
<pre class="purescript"><code>main :: forall e. Eff (console :: CONSOLE, dom :: DOM | e) Unit
main = do
    doc      &lt;-  window &gt;&gt;= document
    greeting &lt;-  textToNode
             &lt;$&gt; createTextNode &quot;Hello sailor!&quot;
             (   htmlDocumentToDocument doc)
    querySelectorAll &quot;#please-ignore .please-ignore&quot;
        (   htmlDocumentToParentNode doc)
        &gt;&gt;= item 0
        &gt;&gt;= toMaybe
        &gt;&gt;&gt; traverse (appendChild greeting)
    log &quot;Hello sailor!&quot;</code></pre>
<p>As an added bonus, the scaffolded project created by <a href="https://github.com/bodil/pulp">pulp</a> has a gratuitous <a href="https://en.wikipedia.org/wiki/Zork">Zork</a> reference. How could I resist?</p>]]></summary>
</entry>
<entry>
    <title>Joy</title>
    <link href="http://www.ericrochester.com//posts/notes/joy/index.html" />
    <id>http://www.ericrochester.com//posts/notes/joy/index.html</id>
    <published>2016-11-17T14:20:17Z</published>
    <updated>2016-11-17T14:20:17Z</updated>
    <summary type="html"><![CDATA[<p>This tweet from the NBA Awards clicked:</p>
<!--more-->
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
“Joy is an act of resistance” head of the <a href="https://twitter.com/nationalbook"><span class="citation">@nationalbook</span></a> Foundation <a href="https://twitter.com/likaluca"><span class="citation">@likaluca</span></a> just reminded us <a href="https://twitter.com/hashtag/NBAwards?src=hash">#NBAwards</a> ✊ also <a href="https://twitter.com/deray"><span class="citation">@deray</span></a> and <a href="https://twitter.com/Luvvie"><span class="citation">@Luvvie</span></a> are here!!
</p>
— Daniel José Older (<span class="citation">@djolder</span>) <a href="https://twitter.com/djolder/status/799077106714034179">November 17, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It reminded me of these lines from the Wendell Berry poem <a href="http://www.onbeing.org/program/program-passover-and-easter/feature/manifesto-mad-farmer-liberation-front/561">Manifesto: The Mad Farmer Liberation Front</a> (the quote on the bottom of each page is also from this poem):</p>
<blockquote>
<p>Expect the end of the world. Laugh.<br/> Laughter is immeasurable. Be joyful<br/> though you have considered all the facts.<br/></p>
</blockquote>
<p>Just as I’m trying to be mindful of beauty, I’d like to be attuned to small acts of resistance and acts of resistance that improve day-to-day life.</p>
<p>But I also must challenge myself not to rest there, but to push toward more direct and obvious resistance as well.</p>]]></summary>
</entry>
<entry>
    <title>Finding Beauty</title>
    <link href="http://www.ericrochester.com//posts/notes/finding-beauty/index.html" />
    <id>http://www.ericrochester.com//posts/notes/finding-beauty/index.html</id>
    <published>2016-11-15T15:45:29Z</published>
    <updated>2016-11-15T15:45:29Z</updated>
    <summary type="html"><![CDATA[<p>For the past few months, I’ve cultivated an intentional practice to look for beauty.</p>
<!--more-->
<p>Partially I’m trying to be more aware of things around me and their beauty. It’s an amazing, fucked up world.</p>
<p>Wading through email is typically not beautiful. So I’ve subscribed to a couple of email lists that help that. Whenever I open one of these, I take a minute to be present to whatever’s inside.</p>
<ul>
<li><a href="http://writersalmanac.org/">Writer’s Almanac</a> sends me a poem each day. There’s a nice variety of anthology-poetry and newer poetry, although my impression is that it does tend toward less experimental works.</li>
<li><a href="http://www.storypeople.com/">StoryPeople</a> sends a drawing and short-short-short story each day. They’re a joyful little interruption from (and engagement in) life.</li>
</ul>
<p>I’m curious where others look for beauty. Feel free to send me suggestions on Twitter or Facebook, and I’ll post some that stand out to me here.</p>]]></summary>
</entry>
<entry>
    <title>Pace Yourself</title>
    <link href="http://www.ericrochester.com//posts/notes/pace-yourself/index.html" />
    <id>http://www.ericrochester.com//posts/notes/pace-yourself/index.html</id>
    <published>2016-11-14T02:16:56Z</published>
    <updated>2016-11-14T02:16:56Z</updated>
    <summary type="html"><![CDATA[<p>Four years is a long time. Eight years is longer.</p>
<!--more-->
<p>Both those time spans are easy to wrap our heads around, though. The truth is that most of us will be dead before the world sees the kind of society we want to live in.</p>
<p>This isn’t a sprint. It’s not even a marathon. It’s a multigenerational migration.</p>
<p>I’ll be posting links to more humor, trying my hand at more fiction. I’ll be trying to listen to those who’ve worked these fields before me.</p>
<p>Pace yourself.</p>
<hr />
<p>I was going to pull a quote or two from each of these links, but they’re both just so good. At some point this week I’m going to highlight quotes I like from the transcripts of these on <a href="https://hypothes.is/">Hypothesis</a>. Those will probably show up again on this blog in some form.</p>
<ul>
<li><a href="http://www.onbeing.org/program/parker-palmer-and-courtney-martin-the-inner-life-of-rebellion/7122">The Inner Life of Rebellion</a> — Parker Palmer and Courtney Martin</li>
<li><a href="http://www.onbeing.org/program/vincent-harding-is-america-possible/79">Is America Possible?</a> — Vincent Harding</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Read It!</title>
    <link href="http://www.ericrochester.com//posts/notes/read-it/index.html" />
    <id>http://www.ericrochester.com//posts/notes/read-it/index.html</id>
    <published>2016-11-12T12:33:59Z</published>
    <updated>2016-11-12T12:33:59Z</updated>
    <summary type="html"><![CDATA[<p>Read this whole thread:</p>
<!--more-->
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
I woke up out of my dead sleep an hour ago. I knew Trump won before I went to bed. I just thought I might have a full nights sleep first
</p>
— 5'7 Black Male (<span class="citation">@absurdistwords</span>) <a href="https://twitter.com/absurdistwords/status/796301496698671104">November 9, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></summary>
</entry>
<entry>
    <title>Energy Packets/Waves</title>
    <link href="http://www.ericrochester.com//posts/notes/energy-packets/index.html" />
    <id>http://www.ericrochester.com//posts/notes/energy-packets/index.html</id>
    <published>2016-11-09T14:07:24Z</published>
    <updated>2016-11-09T14:07:24Z</updated>
    <summary type="html"><![CDATA[<p>Some random thoughts, not about the news, but of course that’s the context.</p>
<!--more-->
<p><a href="http://www.romankrznaric.com/outrospection/2012/10/16/1729" title="Ready for a vulnerability hangover?"><em>Vulnerability hangover</em></a>. It’s a thing. But it’s also kind of the point of the post, no?</p>
<p>For my next longer post I’m thinking about the words and metaphors I used in my <a href="/posts/thoughts/divisions/" title="Divisions">last post</a>.</p>
<p>As I sat meditating this morning, the sun came out from behind a building. I know because I felt my cheek warm and saw the light through my eyelids. And it occurred to me that those packets/waves of energy had travelled 8 light-minutes from a huge ball of fire. Most of the packets/waves that leave that inferno spin off into darkness. Some got scattered by the atmosphere and the glass/plastic window. Yet still there was enough left that it moved the molecules in my skin.</p>
<p>It is an amazing universe we live in. Fucked up, yes. But amazing.</p>
<p>Finally: Yes, I will do something about all the mushroom pictures.</p>
<hr />
<p>Also, some good links my partner has sent on talking to kids about the outcome of the election:</p>
<ul>
<li><a href="http://www.notimeforflashcards.com/2016/11/what-do-i-tell-my-children-in-the-morning.html">What Do I Say to My Kids in the Morning?</a></li>
<li><a href="http://www.newsday.com/opinion/columnists/randi-marshall/what-will-we-tell-our-children-about-donald-trump-win-1.12588933">What Will We Tell Our Children?</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Divisions</title>
    <link href="http://www.ericrochester.com//posts/thoughts/divisions/index.html" />
    <id>http://www.ericrochester.com//posts/thoughts/divisions/index.html</id>
    <published>2016-11-08T19:22:18Z</published>
    <updated>2016-11-08T19:22:18Z</updated>
    <summary type="html"><![CDATA[<p>Social media—and Facebook especially—has made all the facets of life painful and obvious. My feed has a range of voices: from openly racist relatives to those who’ve changed their avatars to show their support for #BlackLivesMatter, from those who still insist on gender binaries to those who’ve felt in their own bodies how untrue that polarity is.</p>
<p>I’ve kept the peace by making myself absent.</p>
<!--more-->
<p>Partially this was because some people are A-OK inflicting violence on others, usually those who have already experienced too much violence in their bodies. Partially this was because I am a little too conflict-avoidant, and I’ve had the had the privilege to indulge myself. I didn’t want to dive into those pools of sharks (with fricking laser beams!). And I didn’t think I was up to the challenge of what? Protecting? Mediating? Just being in those spaces?</p>
<p>But that needs to end.</p>
<p>As a cishet white male, theoretically my voice isn’t exactly missing from important discussions, but maybe my voice will reach someone no one else has gotten through to. Or better yet, maybe I can amplify someone else’s voice.</p>
<p>So what are the parts of me that I’ve been keeping apart? Like the people populating my timeline, they run the gamut: computer programming, medieval literature, genre literature, poetry, spirituality, science, digital humanities, environmental justice, feminism, ethical adoption. I could go on. It’s all there.</p>
<p>This is partially growing out of an article by Parker Palmer, <a href="http://www.couragerenewal.org/parker/writings/divided-no-more/" title="Divided No More">“Divided No More: A Movement Approach to Educational Reform”</a>. He talks about the power of movements to “rewrite the logic of organizations.” The first step in this process is that “Isolated individuals decide to stop leading ‘divided lives.’”</p>
<p>This starts from a deeply personal decision to bring your inner and outer worlds into better alignment, and to so reduce your inner tension and conflict. But as more and more people begin to make this shift and as they begin to connect with each other, a movement is grows. And this can create structural, organizational, and cultural changes.</p>
<p>Palmer points out that a vital part of this process is going public.</p>
<p>Part of this is also the conviction that one prism to look at social justice work through is the prism of creating wholeness and health, particularly in oppressed individuals and communities. But that health has to come at all levels. Sick individuals or unhealthy communities cannot create a whole society. And likewise, an unsafe community or an unjust society will infect the individuals it holds. This is to be a step toward wholeness and, hopefully, health.</p>
<p>So.</p>
<p>I’m tired of the divisions. I’m tired of the walls. I’m getting rid of them. And I’m talking about it.</p>
<p>Except I’m not getting rid of the walls entirely. Rightly used, boundaries are healthy and health-maintaining. I’m not moving this discussion onto Facebook. It’s all happening here, where I have control. I may move the discussion into other places later, but I’m starting here.</p>
<p>Tonight of all nights, as I suffer. As I watch the women in my life suffer. As I watch the people of color in my life suffer. As I watch my LGBTQ friends suffer and my Muslim friends suffer and my immigrant friends suffer. As I watch so many afraid. I have to make to a stand. I have to say who I support and who I fight with.</p>
<p>Fight on.</p>]]></summary>
</entry>
<entry>
    <title>Validating Data with Types</title>
    <link href="http://www.ericrochester.com//posts/code/validating-data-with-types/index.html" />
    <id>http://www.ericrochester.com//posts/code/validating-data-with-types/index.html</id>
    <published>2015-05-22T17:00:00Z</published>
    <updated>2015-05-22T17:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This is cross posted at the <a href="http://scholarslab.org/uncategorized/validating-data-with-types/">Scholars’ Lab Blog</a>.</em></p>
<p>Recently, I had to opportunity to help <a href="http://politics.virginia.edu/node/181" title="J. Warren York">J. Warren York</a>, a graduate student in the Department of Politics here at UVa. He’s looking at how tax law affects political contributions and advocacy, so this was an interesting project that may tell us something useful about how the US government works [insert your favorite broken-government joke here].</p>
<!--more-->
<p>To do this, he needed to download data from a number of different sources in different formats (JSON, YAML, and CSV), pull it all apart, and put some of it back together in a couple of new data files. One of those sources is the <a href="http://data.stanford.edu/dime" title="Database on Ideology, Money in Politics, and Elections">Database on Ideology, Money in Politics, and Elections (DIME)</a>. The data from them tells how much people and organizations have contributed to various candidates, PAC, and other groups.</p>
<p>And while I’ve seen worse, it wasn’t the cleanest data file out there. (To get an idea of what the data looks like, you can see a sample of 100 rows from this data file in <a href="https://docs.google.com/spreadsheets/d/1-m_8pm_s2gfpSAkMF0IYHNjKvWjqDe2d__CrbpjBxFA/edit?usp=sharing" title="Sample Data">this Google Sheet</a>.)</p>
<p>For most projects that I’m reasonably sure that I’ll be the only developer on, I use <a href="https://www.haskell.org/" title="Haskell Programming Language">Haskell</a>. This is a <a href="http://en.wikipedia.org/wiki/Functional_programming" title="Functional Programming on Wikipedia">functional</a>, <a href="http://stackoverflow.com/questions/1517582/what-is-the-difference-between-statically-typed-and-dynamically-typed-languages" title="Stack Overflow on What is the difference between statically typed and dynamically typed languages?">statically typed</a> programming language with a (partially deserved) reputation for being difficult. However, I find that it gives me a nice balance of safety and flexibility, of power and expressiveness.</p>
<p>Given Haskell’s reputation, the previous sentence probably seems to border on insanity. Hopefully this post will prove this at least partially correct and will highlight some of the nicer aspects of working in Haskell. It leverages types to provide some assurances that the data is well-formed and consistent. This means I can perform data validation quickly and easily, and that helps everyone.</p>
<blockquote>
<p>This post is actually runnable Haskell. If you have the <a href="https://www.haskell.org/ghc/" title="GHC Haskell Compiler">GHC</a> compiler installed you can copy and paste this post into a file, say <code>Validating.lhs</code>, and run it from the command line:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">runhaskell</span> Validating.lhs contribDB_1982.csv</code></pre></div>
<p>However, to follow this post, you don’t need to know Haskell. I’ll try to explain enough of the concepts and syntax that matter as they come up, so that anyone familiar with computer programming should be able to follow along without getting into the weeds of exactly what’s happening on each line.</p>
<p>So first some pre-amble and boilerplate. This just makes available the libraries that we’ll use.</p>
</blockquote>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- If you want more details about the code, including brief</span>
<span class="fu">&gt;</span> <span class="co">-- explanations of the syntax, you&#39;ve come to the right place.</span>
<span class="fu">&gt;</span> <span class="co">-- Pay attention to the comments. This still isn&#39;t a tutorial</span>
<span class="fu">&gt;</span> <span class="co">-- on Haskell, but hopefully you&#39;ll have a more detailed</span>
<span class="fu">&gt;</span> <span class="co">-- understanding of what&#39;s happening.</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- First, Haskell code is kept in modules. Executable files are</span>
<span class="fu">&gt;</span> <span class="co">-- in the `Main` module.</span>
<span class="fu">&gt;</span> <span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="co">-- Import statements make the code from these modules available</span>
<span class="fu">&gt;</span> <span class="co">-- in this module. Qualified imports make the code available</span>
<span class="fu">&gt;</span> <span class="co">-- under an alias (e.g., Data.ByteString.Lazy is aliased to B).</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">B</span>
<span class="fu">&gt;</span> <span class="kw">import           </span><span class="dt">Data.Csv</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Text</span>            <span class="kw">as</span> <span class="dt">T</span>
<span class="fu">&gt;</span> <span class="kw">import qualified</span> <span class="dt">Data.Vector</span>          <span class="kw">as</span> <span class="dt">V</span>
<span class="fu">&gt;</span> <span class="kw">import           </span><span class="dt">System.Environment</span></code></pre></div>
<p>To validate the data, we just need to follow the same steps that we would to load it. Those steps are:</p>
<ol style="list-style-type: decimal">
<li>Define the data that you want to use;</li>
<li>Define how to read it from a row of CSV data; and</li>
<li>Read the input.</li>
</ol>
<div class="figure">
<img src="http://scholarslab.org/wp-content/uploads/2015/03/gnomes_plan.gif" alt="Profit!" />
<p class="caption">Profit!</p>
</div>
<p>That’s it. In fact, the last item is so inconsequential that we’ll skip it. But let’s see how the rest of it works.</p>
<h2 id="defining-the-data">Defining the Data</h2>
<p>First we need to define the data. We do this using <em>types</em>. If you only know languages like Ruby, JavaScript, or Python, you may be unfamiliar with types. Basically, they specify what your data will look like. For example, they might specify that a <code>Person</code> data instance has a <code>name</code> string field and an <code>age</code> integer field.</p>
<p>If you come from Java or C#, you know what types are, but Haskell uses them very differently. In Haskell, types are used to express, encode, and enforce the requirements of your program as much as possible. The guideline is that invalid program states should not be expressible in the types you define. To help with that, some of the loopholes in Java’s type system have been closed (looking at you, <code>null</code>): this makes these specifications more meaningful. And because Haskell employs type inference, you also don’t need to actually declare the type of every little thing, so you get more benefit for less work.</p>
<p>In short, types are how we specify what data we’re interested in.</p>
<p>At this point in the process, programming in Haskell is a typical data modeling exercise. But it’s also the foundation for the rest of this post, so we’ll linger here.</p>
<p>Before we define the data types, we’ll first define some aliases. These aren’t really enforced, but they make the data types that use these more clear.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">OrgName</span> <span class="fu">=</span> <span class="dt">T.Text</span>
<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">Year</span>    <span class="fu">=</span> <span class="dt">Int</span>
<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">Amount</span>  <span class="fu">=</span> <span class="dt">Double</span></code></pre></div>
<p>The first data type that we’ll create is <code>Party</code>. This will be similar to enumerations in other languages, but in Haskell they’re just regular data types. A <code>Party</code> can be either a <code>Dem</code> (Democrat), <code>GOP</code> (Republican), <code>Independent</code>, or <code>Unknown</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This statement says that you can make a value of type Party </span>
<span class="fu">&gt;</span> <span class="co">-- using any of the constructors listed (separated by pipes).</span>
<span class="fu">&gt;</span> <span class="co">-- In this case, none of the constructors take extra data, so</span>
<span class="fu">&gt;</span> <span class="co">-- the semantics comes soley from which constructor is chosen.</span>
<span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">Party</span> <span class="fu">=</span> <span class="dt">Dem</span> <span class="fu">|</span> <span class="dt">GOP</span> <span class="fu">|</span> <span class="dt">Independent</span> <span class="fu">|</span> <span class="dt">Unknown</span></code></pre></div>
<p>We want to know what kind of entity is receiving the contribution. However, we don’t actually care about who the recipient was: we just want to distinguish between candidates, committees, and state-level elections. We’ll use the <code>ContribEntry</code> data type for this information.</p>
<p>The following declaration states that a <code>ContribEntry</code> can be either a <code>Candidate</code>, which must have year information and party information; a <code>Committee</code>, which must have only a year; or a <code>StateLevel</code>, which must have a year and a state code.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This shows how values are given types. `contribYear ::</span>
<span class="fu">&gt;</span> <span class="co">-- !Year`, says that the `contribYear` field must contain</span>
<span class="fu">&gt;</span> <span class="co">-- values of type `Year`. The exclamation mark tells the</span>
<span class="fu">&gt;</span> <span class="co">-- Haskell compiler to execute this value immediately. Unlike</span>
<span class="fu">&gt;</span> <span class="co">-- most other languages, Haskell will normally wait to</span>
<span class="fu">&gt;</span> <span class="co">-- evaluate expressions until absolutely necessary.</span>
<span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">ContribEntry</span>
<span class="fu">&gt;</span>         <span class="fu">=</span> <span class="dt">Candidate</span>  {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span>,<span class="ot"> contribParty ::</span> <span class="fu">!</span><span class="dt">Party</span> }
<span class="fu">&gt;</span>         <span class="fu">|</span> <span class="dt">Committee</span>  {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span> }
<span class="fu">&gt;</span>         <span class="fu">|</span> <span class="dt">StateLevel</span> {<span class="ot"> contribYear ::</span> <span class="fu">!</span><span class="dt">Year</span>,<span class="ot"> stateCode ::</span> <span class="fu">!</span><span class="dt">T.Text</span> }</code></pre></div>
<p>Each row of the data file will have information about a single contribution made by an individual or organization. Because we’re primarily interested in the data from organizations, this will be collected in an <code>OrgContrib</code> data type. It will hold the organization’s name (<code>orgContribName</code>), its district (<code>orgDistrict10s</code>), the contribution information (<code>orgContribEntry</code>), and the amount of the contribution (<code>orgContribAmount</code>).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">OrgContrib</span>
<span class="fu">&gt;</span>          <span class="fu">=</span> <span class="dt">OrgContrib</span>
<span class="fu">&gt;</span>          {<span class="ot"> orgContribName   ::</span> <span class="fu">!</span><span class="dt">OrgName</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgDistrict10s   ::</span> <span class="fu">!</span><span class="dt">T.Text</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgContribEntry  ::</span> <span class="fu">!</span><span class="dt">ContribEntry</span>
<span class="fu">&gt;</span>          ,<span class="ot"> orgContribAmount ::</span> <span class="fu">!</span><span class="dt">Amount</span>
<span class="fu">&gt;</span>          }</code></pre></div>
<p>That’s it. We’ve now defined the data we’re interested in. On top of the guarantees that types allow the programming language to enforce, this exercise is also helpful because it clarifies what we want from the data and helps us better understand the domain that we’re working in.</p>
<h2 id="data-from-csv">Data from CSV</h2>
<p>However, we haven’t connected this data with the CSV file yet. Let’s do that now.</p>
<p>To make this happen, we’ll need to take the data types that we just defined and define instances of <code>FromField</code> for ones that are populated from a single field, like <code>Party</code>, and <code>FromNamedRecord</code> for others, which are built from an entire row.</p>
<p><code>FromField</code> and <code>FromNamedRecord</code> are <a href="http://en.wikipedia.org/wiki/Type_class" title="Type Class on Wikipedia">type classes</a>. In object-oriented terms, these are similar to small interfaces, some only declaring one or two methods. Data types can implement the type classes that make sense, but omit the ones that do not.</p>
<p>In this case these type classes define what data types can be read from a row of CSV and how that should happen.</p>
<p><code>Party</code> is the first data type we’ll tackle. It only reads a single field, so we’ll define <code>FromField</code>. In the CSV file, the data is encoded with numeric codes, which we’ll change into <code>Party</code> values.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This defines a instance of `FromField` for `Party`.</span>
<span class="fu">&gt;</span> <span class="co">-- `parseField` is the only method. Multiple listings for this</span>
<span class="fu">&gt;</span> <span class="co">-- function, combined with the string literals in place of the</span>
<span class="fu">&gt;</span> <span class="co">-- parameter, means that the method acts as a big case</span>
<span class="fu">&gt;</span> <span class="co">-- statement on its one parameter. When the function is passed</span>
<span class="fu">&gt;</span> <span class="co">-- the string &quot;100&quot;, the first definition will be used. The</span>
<span class="fu">&gt;</span> <span class="co">-- last clause, with the underscore, is a catch-all, in which</span>
<span class="fu">&gt;</span> <span class="co">-- the parameter&#39;s value will be ignored.</span>
<span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromField</span> <span class="dt">Party</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;100&quot;</span> <span class="fu">=</span> return <span class="dt">Dem</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;200&quot;</span> <span class="fu">=</span> return <span class="dt">GOP</span>
<span class="fu">&gt;</span>     parseField <span class="st">&quot;328&quot;</span> <span class="fu">=</span> return <span class="dt">Independent</span>
<span class="fu">&gt;</span>     <span class="co">-- This catch-all is probably a bad idea....</span>
<span class="fu">&gt;</span>     parseField _     <span class="fu">=</span> return <span class="dt">Unknown</span></code></pre></div>
<p>Notice my comment on the next to last line. Having a catch-all field like this introduces some <a href="http://en.wikipedia.org/wiki/Code_smell" title="Code Smell on Wikipedia">code smell</a>, and it weakens the type-safety of the field. A better practice would be to define a <code>Party</code> constructor for every numeric code and throw an error when we find something unexpected. Since we’re only interested here in two parties, that would be overkill, so in this case we’ll be more flexible.</p>
<p>Now we can define how to read <code>ContribEntry</code> data. This is complicated because we have to look at the value of the <code>recipient_type</code> field in order to figure out which constructor to use.</p>
<p>We’ll also define a utility function, <code>defaulting</code>, that defaults empty strings to a given value.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="co">-- This defines the function defaulting. The first line is the</span>
<span class="fu">&gt;</span> <span class="co">-- type value. The definition of `defaulting` is a more</span>
<span class="fu">&gt;</span> <span class="co">-- complicated case statement that first tests `T.null v`</span>
<span class="fu">&gt;</span> <span class="co">-- (i.e., that it&#39;s empty), and `otherwise` is the &quot;else&quot; part</span>
<span class="fu">&gt;</span> <span class="co">-- of the statement.</span>
<span class="fu">&gt;</span><span class="ot"> defaulting ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span>
<span class="fu">&gt;</span> defaulting d v <span class="fu">|</span> T.null v  <span class="fu">=</span> d
<span class="fu">&gt;</span>                <span class="fu">|</span> otherwise <span class="fu">=</span> v
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromNamedRecord</span> <span class="dt">ContribEntry</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseNamedRecord m <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>         <span class="co">-- Read the recipient_type field. The `.:` operator</span>
<span class="fu">&gt;</span>         <span class="co">-- reads a specific field from the CSV row.</span>
<span class="fu">&gt;</span>         rtype <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;recipient_type&quot;</span>
<span class="fu">&gt;</span>         <span class="co">-- If recipient_type is empty, give it a default value</span>
<span class="fu">&gt;</span>         <span class="co">-- of &quot;CAND&quot;, and then branch on that.</span>
<span class="fu">&gt;</span>         <span class="kw">case</span> defaulting <span class="st">&quot;CAND&quot;</span> rtype <span class="kw">of</span>
<span class="fu">&gt;</span>             <span class="st">&quot;CAND&quot;</span> <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Read the cycle (year) and recipient_party fields</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 party <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;recipient_party&quot;</span>
<span class="fu">&gt;</span>                 <span class="co">-- Create a Candidate</span>
<span class="fu">&gt;</span>                 return (<span class="dt">Candidate</span> cycle party)
<span class="fu">&gt;</span>             <span class="st">&quot;COMM&quot;</span> <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Read the cycle and return a Committe</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 return (<span class="dt">Committee</span> cycle)
<span class="fu">&gt;</span>             r <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>                 <span class="co">-- Everything else is a state-level contribution.</span>
<span class="fu">&gt;</span>                 <span class="co">-- Get the cycle and return that.</span>
<span class="fu">&gt;</span>                 cycle <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;cycle&quot;</span>
<span class="fu">&gt;</span>                 return (<span class="dt">StateLevel</span> cycle r)</code></pre></div>
<p>(You might be wondering why I haven’t needed to define a <code>FromField</code> for <code>Year</code> for the “cycle” fields. Remember that <code>Year</code> is just an alias for <code>Int</code>, and the CSV library already defines <code>FromField</code> for the <code>Int</code> type.)</p>
<p>We can finally define the instance for <code>OrgContrib</code>. After the complexity of <code>ContribEntry</code>, this one will be much simpler. We’ll extract the values for a few fields, parse the <code>ContribEntry</code>, and then create and return the <code>OrgContrib</code> value.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">instance</span> <span class="dt">FromNamedRecord</span> <span class="dt">OrgContrib</span> <span class="kw">where</span>
<span class="fu">&gt;</span>     parseNamedRecord m <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>         name     <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;contributor_name&quot;</span>
<span class="fu">&gt;</span>         district <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;contributor_district_10s&quot;</span>
<span class="fu">&gt;</span>         contrib  <span class="ot">&lt;-</span> parseNamedRecord m
<span class="fu">&gt;</span>         amount   <span class="ot">&lt;-</span> m <span class="fu">.:</span> <span class="st">&quot;amount&quot;</span>
<span class="fu">&gt;</span>         return (<span class="dt">OrgContrib</span> name district contrib amount)</code></pre></div>
<p>With these in place, we can read the data and have it verified at the same time. For example, if the file reads correctly, I know that the <code>Year</code> data are integers and that <code>Party</code> fields contain valid data.</p>
<p>And that’s really all there is to it. Below the end of the article, I’ve included a function to read the CSV data from a file and the <code>main</code> function, which controls the whole process. However, reading and validating the data has already been taken care of.</p>
<p>Of course, while these types provide reasonable validation, you could get much better, depending on how you define your types and how you parse the incoming data. (For example, you could only allow valid state codes for <code>StateLevel</code> or limit years to a given range.)</p>
<p>If you’re wondering about tests, the implementations of <code>FromField</code> and <code>FromNamedRecord</code> would be good to have tests for. However, the parts of the program’s requirements that are enforced in the types don’t really need testing; for example, I wouldn’t test that party fields will always be parsed as a <code>Party</code>.</p>
<p>Types also come in handy in other circumstances: when you’ve left the code for a while and need to get back into it, they provide a minimum amount of guidance; and when you need to refactor, they act as a base-line set of regression tests, to tell you when you’ve broken something.</p>
<p>Overall, I find that this small program shows how Haskell can provide a lot of power and expressivity for relatively little code.</p>
<p>But the immediate benefit in this case is that I was able to provide John more assurances about his data, and to provide them more quickly. It’s a nice example of leveraging types to write better programs that provide real-world benefits.</p>
<p>The full code for this project is in my <a href="https://github.com/erochest/popvox-scrape" title="The Popvox Scrape Repository">popvox-scrape</a> repository. Feel free to check it out.</p>
<hr />
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> readData ::</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">Header</span>, <span class="dt">V.Vector</span> <span class="dt">OrgContrib</span>))
<span class="fu">&gt;</span> readData filename <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>     rawData <span class="ot">&lt;-</span> B.readFile filename
<span class="fu">&gt;</span>     return (decodeByName rawData)
<span class="fu">&gt;</span>
<span class="fu">&gt;</span><span class="ot"> main ::</span> <span class="dt">IO</span> ()
<span class="fu">&gt;</span> main <span class="fu">=</span> <span class="kw">do</span>
<span class="fu">&gt;</span>     args <span class="ot">&lt;-</span> getArgs
<span class="fu">&gt;</span>     <span class="kw">case</span> args <span class="kw">of</span>
<span class="fu">&gt;</span>         [filename] <span class="ot">-&gt;</span> <span class="kw">do</span>
<span class="fu">&gt;</span>             dataRows <span class="ot">&lt;-</span> readData filename
<span class="fu">&gt;</span>
<span class="fu">&gt;</span>             <span class="kw">case</span> dataRows <span class="kw">of</span>
<span class="fu">&gt;</span>                 <span class="dt">Left</span> err <span class="ot">-&gt;</span> putStrLn (<span class="st">&quot;ERROR: &quot;</span> <span class="fu">++</span> err)
<span class="fu">&gt;</span>                 <span class="dt">Right</span> (_, rows) <span class="ot">-&gt;</span> putStrLn (  <span class="st">&quot;SUCCESS: &quot;</span>
<span class="fu">&gt;</span>                                             <span class="fu">++</span> show (V.length rows)
<span class="fu">&gt;</span>                                             <span class="fu">++</span> <span class="st">&quot; read.&quot;</span>)
<span class="fu">&gt;</span>
<span class="fu">&gt;</span>         _ <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;usage: runhaskell Validate.lhs data-file.csv&quot;</span></code></pre></div>]]></summary>
</entry>

</feed>
